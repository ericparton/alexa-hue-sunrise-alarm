/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.djungelorm.alexa.hue.sunrise.alarm;

import com.djungelorm.alexa.hue.sunrise.alarm.http.alexa.AlexaDevice;
import com.djungelorm.alexa.hue.sunrise.alarm.http.alexa.AlexaHttpClient;
import com.djungelorm.alexa.hue.sunrise.alarm.http.alexa.AlexaNotification;
import com.djungelorm.alexa.hue.sunrise.alarm.hue.ArtificialSunriseSequence;
import com.github.zeroone3010.yahueapi.Hue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.time.*;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {
    private static final Logger log = LogManager.getLogger(App.class);

    private static AlexaHttpClient alexaHttpClient;
    private static Hue hueHttpClient;
    private static ArtificialSunriseSequence currentSunriseSequence;

    public static void main(String[] args) {
        alexaHttpClient = new AlexaHttpClient(Configuration.getAlexaAuthenticationCookie());
        hueHttpClient = new Hue(Configuration.getHueBridgeIpAddress(), Configuration.getHueApiKey());

        log.info("Starting alexa hue wakeup timer");

        var refreshInterval = Configuration.getRefreshInterval();
        var scheduler = Executors.newScheduledThreadPool(1);

        scheduler.scheduleAtFixedRate(new AppTask(), 0, refreshInterval, TimeUnit.SECONDS);

        log.info("Checking for new alarms every {} seconds", refreshInterval);
    }

    private static class AppTask implements Runnable {
        @Override
        public void run() {
            try {
                var alexaDeviceName = Configuration.getAlexaDeviceName();

                var alexaDeviceId = alexaHttpClient.getDevices().stream()
                        .filter(alexaDevice -> alexaDevice.getAccountName().equals(alexaDeviceName))
                        .findFirst().map(AlexaDevice::getSerialNumber);

                if (!alexaDeviceId.isPresent()) {
                    log.warn("No Alexa device named '{}' was found", alexaDeviceName);
                    return;
                }

                var now = LocalDateTime.now();
                var sequenceDuration = Configuration.getSequenceDuration();

                var nextAlarm = alexaHttpClient.getNotifications().stream()
                        .filter(alexaNotification -> alexaNotification.getDeviceSerialNumber().equals(alexaDeviceId.get()))
                        .filter(alexaNotification -> alexaNotification.getStatus().equals("ON"))
                        .filter(alexaNotification -> alexaNotification.getType().equals("Alarm"))
                        .filter(alexaNotification -> Duration.between(now, alexaNotification.getAlarmTime()).toSeconds() <= sequenceDuration * 60)
                        .min(Comparator.comparing(AlexaNotification::getAlarmTime));

                if (!nextAlarm.isPresent()) {
                    if (currentSunriseSequence != null) {
                        currentSunriseSequence.stop();
                        currentSunriseSequence = null;
                    }
                    return;
                }

                if (currentSunriseSequence != null) {
                    if (currentSunriseSequence.getAlarm().getAlarmTime().equals(nextAlarm.get().getAlarmTime())) {
                        return;
                    } else {
                        currentSunriseSequence.stop();
                    }
                }

                log.info("Alarm found for {}", nextAlarm.get().getAlarmTime());

                currentSunriseSequence = new ArtificialSunriseSequence(nextAlarm.get(), hueHttpClient);
                currentSunriseSequence.start();
            } catch (Exception e) {
                log.error("An error has occurred while processing alarm configuration.");
                if (!e.getMessage().isBlank()) {
                    log.error(e);
                }
            }
        }
    }
}
