/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.djungelorm.alexa.hue.wakeup.timer;

import com.djungelorm.alexa.hue.wakeup.timer.http.alexa.AlexaDevice;
import com.djungelorm.alexa.hue.wakeup.timer.http.alexa.AlexaHttpClient;
import com.djungelorm.alexa.hue.wakeup.timer.http.alexa.AlexaNotification;
import com.djungelorm.alexa.hue.wakeup.timer.hue.ArtificialSunriseSequence;
import com.github.zeroone3010.yahueapi.Hue;

import java.time.*;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {
    private static AlexaHttpClient alexaHttpClient;
    private static Hue hueHttpClient;
    private static ArtificialSunriseSequence currentSunriseSequence;

    //TODO: replace System.out.println with logging
    public static void main(String[] args) {
        alexaHttpClient = new AlexaHttpClient(Configuration.getAlexaAuthenticationCookie());
        hueHttpClient = new Hue(Configuration.getHueBridgeIpAddress(), Configuration.getHueApiKey());

        System.out.println("Starting Alexa Hue Wakeup Timer");

        var refreshInterval = Configuration.getRefreshInterval();
        var scheduler = Executors.newScheduledThreadPool(1);

        scheduler.scheduleAtFixedRate(new AppTask(), 0, refreshInterval, TimeUnit.SECONDS);

        System.out.println(String.format("Task scheduled to fire every %d seconds", refreshInterval));
    }

    private static class AppTask implements Runnable {
        @Override
        public void run() {
            var alexaDeviceName = Configuration.getAlexaDeviceName();

            var alexaDeviceId = alexaHttpClient.getDevices().stream()
                    .filter(alexaDevice -> alexaDevice.getAccountName().equals(alexaDeviceName))
                    .findFirst().map(AlexaDevice::getSerialNumber);

            if (!alexaDeviceId.isPresent()) {
                System.out.println(String.format("No Alexa device named '%s' was found", alexaDeviceName));
                return;
            }

            var now = LocalDateTime.now();
            var sequenceDuration = Configuration.getSequenceDuration();

            var nextAlarm = alexaHttpClient.getNotifications().stream()
                    .filter(alexaNotification -> alexaNotification.getDeviceSerialNumber().equals(alexaDeviceId.get()))
                    .filter(alexaNotification -> alexaNotification.getStatus().equals("ON"))
                    .filter(alexaNotification -> alexaNotification.getType().equals("Alarm"))
                    .filter(alexaNotification -> Duration.between(now, alexaNotification.getAlarmTime()).toSeconds() <= sequenceDuration * 60)
                    .min(Comparator.comparing(AlexaNotification::getAlarmTime));

            if (!nextAlarm.isPresent()) {
                if (currentSunriseSequence != null) {
                    currentSunriseSequence.stop();
                    currentSunriseSequence = null;
                }
                return;
            }

            if (currentSunriseSequence != null) {
                if (currentSunriseSequence.getAlarm().getAlarmTime().equals(nextAlarm.get().getAlarmTime())) {
                    return;
                } else {
                    currentSunriseSequence.stop();
                }
            }

            System.out.println(String.format("Alarm found for %s", nextAlarm.get().getAlarmTime()));

            currentSunriseSequence = new ArtificialSunriseSequence(nextAlarm.get(), hueHttpClient);
            currentSunriseSequence.start();
        }
    }
}
